@page "/upd-del-department"
@page "/upd-del-department/{id}"
@attribute [Authorize(Roles = "admin")]
@inject IDepartmentService DepartmentService
@inject IOfficeService OfficeService
@inject NavigationManager NavigationManager
@inject IToastService ToastService

@if (Id == null)
{
    <PageTitle>Adding</PageTitle>
    <h3 class="page-header">Add a new Department</h3>
}
else
{
    <PageTitle>Edit </PageTitle>
    <h3 class="page-header">Edit Department</h3>
}

<div class="page-content">
    <div class="form-content">
        <EditForm class="form-detail" Model="_department" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <div class="form-row-total">

                <div class="form-row">
                    <label>Department Name</label>
                    <InputText id="departmentName" @bind-Value="_department.DepartmentName" class="form-control" />
                    <ValidationMessage For="@(() => _department.DepartmentName)" />
                </div>

                <div class="form-row">
                    <label class="text-center">Office Name</label>
                    <InputSelect @bind-Value="_department.OfficeId" class="form-select">
                        @foreach (var office in OfficeService.Offices)
                        {
                            <option value="@office.OfficeId">@office.Name</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="form-row-total">
                <div class="form-row">
                    <div class="mb-3">
                        <label for="departmentDescription" class="form-label">Department Description</label>
                        <InputTextArea @bind-Value="_department.Description" class="form-control" id="departmentDescription" rows="3" />
                        <ValidationMessage For="@(() => _department.Description)" />
                    </div>
                </div>
            </div>

            <div class="mt-3 text-center">
                <button type="submit" disabled="@disable" class="btn btn-warning btn-shape">@btnText</button>
                &nbsp;
                &nbsp;
                @if (Id is not null)
                {
                    <button type="button" class="btn btn-danger btn-shape" @onclick="RemoveDepartment">Delete Department</button>
                }
                &nbsp;
                &nbsp;
                <a class="btn btn-primary mt-1 btn-shape" href="department">To Department List</a>
            </div>
        </EditForm>
    </div>
</div>

@code {

    [Parameter]
    public string? Id { get; set; }
    private DepartmentResponse _department = new DepartmentResponse();
    string btnText = string.Empty;
    bool disable { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        disable = false;
        btnText = Id == null ? "New Department" : "Update Department";
        await OfficeService.GetOfficeList();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is null)
        {
            var Office = OfficeService.Offices[0];
            _department.OfficeId = Office.OfficeId;
        }else
        {
            var result = await DepartmentService.GetDepartmentById(Id);
            if (result.Data is null)
            {
                ToastService.ShowError(result.Message + " 😠", settings =>
                     { settings.IconType = IconType.FontAwesome; settings.DisableTimeout = true; });
            }
            else
            {
                if (result != null && result.Data != null)
                    _department = result.Data;
            }
        }
    }
    private async Task HandleSubmit()
    {
        if (Id is null)
        {
            var result = await DepartmentService.AddDepartment(_department);
            if (!result.Success)
            {
                ToastService.ShowError(result.Message, settings =>
                 { settings.IconType = IconType.FontAwesome; settings.DisableTimeout = true; });
                disable = true;
            }
            else
            {
                ToastService.ShowSuccess(result.Message, settings =>
               { settings.IconType = IconType.FontAwesome; });
                Navigate();
            }
        }
        else
        {
            var result = await DepartmentService.UpdateDepartment(_department);
            if (!result.Success)
            {
                ToastService.ShowError(result.Message, settings =>
                 { settings.IconType = IconType.FontAwesome; settings.DisableTimeout = true; });
                disable = true;
            }
            else
            {
                ToastService.ShowSuccess(result.Message, settings =>
               { settings.IconType = IconType.FontAwesome; });
                Navigate();
            }
        }
    }

    private async Task RemoveDepartment()
    {
        var result = await DepartmentService.RemoveDepartment(Id);
        if (!result.Success)
        {
            ToastService.ShowError(result.Message, settings =>
                     { settings.IconType = IconType.FontAwesome; settings.DisableTimeout = true; });
            disable = true;
        }
        else
        {
            ToastService.ShowSuccess(result.Message, settings =>
                   { settings.IconType = IconType.FontAwesome; });
            Navigate();
        }
    }
    private void Navigate()
    {
        NavigationManager.NavigateTo("department");
    }
}
