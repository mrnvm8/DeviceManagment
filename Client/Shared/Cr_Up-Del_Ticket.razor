@page "/upd-del-ticket"
@page "/upd-del-ticket/{id}"
@attribute [Authorize]
@inject IDeviceService DeviceService
@inject IDeviceTypeService DeviceTypeService
@inject ITicketService TicketService
@inject NavigationManager NavigationManager
@inject IToastService ToastService

@if (Id == null)
{
    <PageTitle>Adding</PageTitle>
    <h3 class="page-header">Add new Ticket</h3>
}
else
{
    <PageTitle>Edit </PageTitle>
    <h3 class="page-header">Edit Ticket</h3>
}

@if(DeviceService.Devices.Count == 0 ) {
    <div class="container">
        <RadzenStack Orientation="Orientation.Horizontal"
                     AlignItems="AlignItems.Center"
                     JustifyContent="JustifyContent.Center"
                     Wrap="FlexWrap.Wrap" Class="rz-m-12"
                     Gap="2rem">
            <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate"
                                       Size="ProgressBarCircularSize.Large">
                <Template>wait...</Template>
            </RadzenProgressBarCircular>
        </RadzenStack>
    </div>
}
else if(SubmitAdd == false)
{
    <div class="container">
        <RadzenStack Orientation="Orientation.Horizontal"
                     AlignItems="AlignItems.Center"
                     JustifyContent="JustifyContent.Center"
                     Wrap="FlexWrap.Wrap" Class="rz-m-12"
                     Gap="2rem">
            <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate"
                                       Size="ProgressBarCircularSize.Large">
                <Template>wait...</Template>
            </RadzenProgressBarCircular>
        </RadzenStack>
    </div>
}
else{
<div class="page-content">
        <div class="form-content">
            <EditForm class="form-detail" Model="_ticket" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <div class="form-row-total">

                    <div class="form-row">
                        <label>Ticket Title</label>
                        <InputText id="title" @bind-Value="_ticket.TicketTitle" class="form-control" />
                        <ValidationMessage For="@(() => _ticket.TicketTitle)" />
                    </div>

                    <div class="form-row">
                        <label class="text-center">Device Type</label>
                        <select disabled="@Editable" value="@_selectedType" @onchange="@TypeOnChange" class="form-select">
                            <option value="">---Select Type---</option>
                            @foreach (var type in _typeList)
                            {
                                <option value="@type.Id">@type.Name</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="form-row-total">
                    <div class="form-row">
                        <label class="text-center">Device Name</label>
                        <InputSelect disabled="@Editable" @bind-Value="_ticket.DeviceId" class="form-select">
                            @foreach (var device in _deviceList)
                            {
                                <option value="@device.DeviceId">@device.DeviceName</option>
                            }
                        </InputSelect>
                    </div>
                </div>

                <div class="">
                    <div class="">
                        <div class="mb-3">
                            <label for="Issue" class="form-label">Device Issue</label>
                            <InputTextArea @bind-Value="_ticket.TicketIssue" class="form-control" id="Issue" rows="4" />
                            <ValidationMessage For="@(() => _ticket.TicketIssue)" />
                        </div>
                    </div>
                </div>

                <div class="mt-3 text-center">
                    <button type="submit" disabled="@disable" class="btn btn-warning btn-shape">@btnText</button>
                    &nbsp;
                    &nbsp;
                    @if (Id is not null)
                    {
                        <button type="button" class="btn btn-danger btn-shape" @onclick="RemoveTicket">Remove Ticket</button>
                    }
                    &nbsp;
                    &nbsp;
                    <a class="btn btn-primary mt-1 btn-shape" href="ticket">Tickets</a>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? Id { get; set; }
    private TicketResponse _ticket { get; set; } = new TicketResponse();
    private DeviceTypeResponse _type { get; set; } = new DeviceTypeResponse();
    string btnText = string.Empty;
    bool disable { get; set; } = false;
    bool SubmitAdd { get; set; } = true;
    bool Editable = true;
    public string _selectedType { get; set; } = string.Empty;
    public List<DeviceTypeResponse> _typeList = new List<DeviceTypeResponse>();
    public IEnumerable<DeviceResponse> _deviceList = new List<DeviceResponse>();

    protected override async Task OnInitializedAsync()
    {
        disable = false;
        Editable = true;
        SubmitAdd = true;
        btnText = Id == null ? "New Ticket" : "Update Ticket";
        await DeviceTypeService.GetDeviceTypes();
        await DeviceService.GetDeviceList("");
        _typeList = DeviceTypeService.DeviceTypes;
        if(Id is not null)
        {
            _deviceList = DeviceService.Devices;
        }

    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is null)
        {
            // var devices = DeviceService.Devices[0];
            // _ticket.DeviceId = devices.DeviceId;
            Editable = false;
        }
        else
        {
            Editable = true;
            var result = await TicketService.GetTicketById(Id);
            if (result.Data is null)
            {
                ToastService.ShowError(result.Message, settings =>
                     { settings.IconType = IconType.FontAwesome; settings.DisableTimeout = true; });
            }
            else
            {
                if (result is not null && result.Data is not null)
                {
                    _ticket = result.Data;
                    _selectedType = _ticket.DeviceTypeId;
                }
            }
        }
    }

    private async Task HandleSubmit()
    {
        if (Id is null)
        {
            SubmitAdd = false;
            _ticket.DeviceTypeId = _selectedType;
            var result = await TicketService.AddTicket(_ticket);
            if (!result.Success)
            {
                SubmitAdd = true;
                ToastService.ShowError(result.Message, settings =>
                 { settings.IconType = IconType.FontAwesome; settings.DisableTimeout = true; });
                disable = true;

            }
            else
            {
                SubmitAdd = result.Success;
                ToastService.ShowSuccess(result.Message, settings =>
               { settings.IconType = IconType.FontAwesome; });
                Navigate();
            }
        }
        else
        {
            var result = await TicketService.UpdateTicket(_ticket);

            if (!result.Success)
            {
                ToastService.ShowError(result.Message, settings =>
                    { settings.IconType = IconType.FontAwesome; settings.DisableTimeout = true; });
                disable = true;
            }
            else
            {
                ToastService.ShowSuccess(result.Message, settings =>
                   { settings.IconType = IconType.FontAwesome; });
                Navigate();
            }
        }
    }

    private async Task RemoveTicket()
    {
        var result = await TicketService.RemoveTicket(Id);
        if (!result.Success)
        {
            ToastService.ShowError(result.Message, settings =>
                     { settings.IconType = IconType.FontAwesome; settings.DisableTimeout = true; });
            disable = true;
        }
        else
        {
            ToastService.ShowSuccess(result.Message, settings =>
                   { settings.IconType = IconType.FontAwesome; });
            Navigate();
        }
    }

    public void GetDevices(string typeId)
    {

        var devices = DeviceService.Devices;
        _deviceList = devices.Where(x => x.TypeId.Equals(typeId));
    }

    private void TypeOnChange(ChangeEventArgs evt)
    {
        if (!String.IsNullOrEmpty(evt.Value?.ToString()))
        {
            _selectedType = evt.Value?.ToString();
            GetDevices(_selectedType);
        }
        this.StateHasChanged();
    }

    private void Navigate()
    {
        NavigationManager.NavigateTo("ticket");
    }

}
