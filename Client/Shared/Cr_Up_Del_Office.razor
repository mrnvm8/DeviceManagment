@page "/upd-del-office"
@page "/upd-del-office/{id}"

@attribute [Authorize(Roles = "admin")]
@inject IOfficeService OfficeService
@inject NavigationManager NavigationManager
@inject IToastService ToastService

@if (Id == null)
{
    <PageTitle>Adding</PageTitle>
    <h3 class="page-header">Add a new Office</h3>
}
else
{
    <PageTitle>Edit </PageTitle>
    <h3 class="page-header">Edit Office</h3>
}

<div class="page-content">
    <div class="form-content">
        <EditForm class="form-detail" Model="_office" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />

            <div class="form-row-total">
                <div class="form-row">
                    <label>Office Name</label>
                    <InputText @bind-Value="_office.Name" class="form-control" />
                    <ValidationMessage For="@(() => _office.Name)" />
                </div>
                &nbsp;
                &ensp;
                <div class="form-row">
                    <label>Office Location</label>
                    <InputText @bind-Value="_office.Location" class="form-control" />
                    <ValidationMessage For="@(() => _office.Location)" />
                </div>
            </div>

            <div class="mt-3 text-center">
                <button type="submit" disabled="@disable" class="btn btn-warning btn-shape">@btnText</button>
               
                &nbsp;
                &nbsp;
                @if (Id is not null)
                {
                    <button type="button" class="btn btn-danger btn-shape" @onclick="RemoveOffice">Delete Department</button>
                }
                &nbsp;
                &nbsp;
                <a class="btn btn-primary mt-1 btn-shape" href="office">To Office List</a>
            </div>
        </EditForm>
    </div>
</div>

@code {

    [Parameter]
    public string? Id { get; set; }
    private OfficeResponse _office = new OfficeResponse();
    string btnText = string.Empty;
    bool disable { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        disable = false;
        btnText = Id == null ? "New Office" : "Update Office";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            var result = await OfficeService.GetOfficeById(Id);
            if (result.Data is null)
            {
                disable = true;
                ToastService.ShowError(result.Message, settings =>
                    { settings.IconType = IconType.FontAwesome; settings.DisableTimeout = true; });
            }
            else
            {
                if (result != null && result.Data != null)
                    _office = result.Data;
            }
        }
    }

    private async Task HandleSubmit()
    {
        if (Id is null)
        {
            var result = await OfficeService.AddOffice(_office);
            if (!result.Success)
            {
                disable = true;
                ToastService.ShowError(result.Message, settings => 
                    { settings.IconType = IconType.FontAwesome; settings.DisableTimeout = true; });
            }
            else
            {
                ToastService.ShowSuccess(result.Message, settings => 
                    { settings.IconType = IconType.FontAwesome; });
                Navigate();
            }
        }
        else
        {
            var result = await OfficeService.UpdateOffice(_office);
            if (!result.Success)
            {
                disable = true;
                ToastService.ShowError(result.Message, settings =>
                    { settings.IconType = IconType.FontAwesome; settings.DisableTimeout = true; });
            }
            else
            {
                ToastService.ShowSuccess(result.Message, settings =>
                    { settings.IconType = IconType.FontAwesome; });
                Navigate();
            }
        }
    }


    private async Task RemoveOffice()
    {
        var result = await OfficeService.RemoveOffice(Id);
        if (!result.Success)
        {
            disable = true;
            ToastService.ShowError(result.Message, settings =>
                   { settings.IconType = IconType.FontAwesome; settings.DisableTimeout = true; });
        }
        else
        {
            ToastService.ShowSuccess(result.Message, settings =>
                    { settings.IconType = IconType.FontAwesome; });
            Navigate();
        }
    }
    private void Navigate()
    {
        NavigationManager.NavigateTo("office/1");
    }
}
