@page "/login"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Login</PageTitle>
<h3 class="page-header">Login</h3>

<div class="row mb-2">
    <div class="col-lg-3 col-md-2"></div>
    <div class="col-lg-6 col-md-8 login-box">
        <div class="col-lg-12 login-title datalicious-header">
            Datalicious Login
        </div>
        <div class="col-lg-12 login-form">
            <EditForm Model="user" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="user.Email" class="form-control" />
                    <ValidationMessage For="@(() => user.Email)" />
                </div>
                <div class="mb-3">
                    <label for="password">Password</label>
                    <InputText type="password" id="password" @bind-Value="user.Password" class="form-control" />
                    <ValidationMessage For="@(() => user.Password)" />
                </div>
                <button type="submit" class="btn btn-primary btn-shape">Login</button>
            </EditForm>
            <div class="text-danger errorMessage">
                <span>@errorMessage</span>
            </div>
        </div>
    </div>
</div>
@code {

    private UserLogin user = new UserLogin();
    private string errorMessage = string.Empty;

    private string returnUrl = string.Empty;

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("");
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}
