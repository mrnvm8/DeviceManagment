@page "/upd-del-type"
@page "/upd-del-type/{id}"
@attribute [Authorize(Roles = "admin")]
@inject IDeviceTypeService DeviceTypeService
@inject NavigationManager NavigationManager

@if (Id == null)
{
    <PageTitle>Adding</PageTitle>
    <h3 class="page-header">Add a new Device Type</h3>
}
else
{
    <PageTitle>Edit </PageTitle>
    <h3 class="page-header">Edit Device Type</h3>
}

<div class="page-content">
    <div class="form-content">
        <EditForm class="form-detail" Model="_deviceType" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />

            <div class="form-row-total">
                <div class="form-row">
                    <label>Device Type Name</label>
                    <InputText @bind-Value="_deviceType.Name" class="form-control" />
                    <ValidationMessage For="@(() => _deviceType.Name)" />
                </div>
                &nbsp;
                &ensp;
                <div class="form-row">
                    <label>Description</label>
                    <InputTextArea @bind-Value="_deviceType.Description" rows="3" class="form-control" />
                    <ValidationMessage For="@(() => _deviceType.Description)" />
                </div>
            </div>

            <div class="mt-3 text-center">
                <button type="submit" class="btn btn-warning btn-shape">@btnText</button>
                &nbsp;
                &nbsp;
                @if (Id is not null)
                {
                    <button type="button" class="btn btn-danger btn-shape" @onclick="RemoveType">Delete Type</button>
                }
                &nbsp;
                &nbsp;
                <a class="btn btn-primary mt-1 btn-shape" href="type">To DeviceType List</a>
            </div>
        </EditForm>
        <div class="text-message">
            <span>@Message</span>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public string? Id { get; set; }
    private DeviceTypeResponse _deviceType = new DeviceTypeResponse();
    string btnText = string.Empty;
    string Message = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "New Device Type" : "Update Device Type";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            var result = await DeviceTypeService.GetDeviceTypeById(Id);
            if (!result.Success)
            {
                Message = result.Message;
            }
            else
            {
                if (result != null && result.Data != null)
                    _deviceType = result.Data;
            }
        }
    }

    private async Task HandleSubmit()
    {
        if (Id == null)
        {
            var result = await DeviceTypeService.AddDeviceType(_deviceType);
            if (!result.Success)
            {
                Message = result.Message;
            }
            else
            {
                Navigate();
            }
        }
        else
        {
            var result = await DeviceTypeService.UpdateDeviceType(_deviceType);
            if (!result.Success)
            {
                Message = result.Message;
            }
            else
            {
                Navigate();
            }
        }
    }

    private async Task RemoveType()
    {
        var result = await DeviceTypeService.RemoveDeviceType(Id);
        if (!result.Success)
        {
            Message = result.Message;
        }
        else
        {
            Navigate();
        }
    }
    private void Navigate()
    {
        NavigationManager.NavigateTo("type/1");
    }
}