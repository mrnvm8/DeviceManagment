@page "/upd-del-employee"
@page "/upd-del-employee/{id}"
@attribute [Authorize(Roles = "admin")]
@inject IEmployeeService EmployeeService
@inject IPersonService PersonService
@inject IDepartmentService DepartmentService
@inject NavigationManager NavigationManager
@inject IToastService ToastService

@if (Id == null)
{
    <PageTitle>Create a new employee</PageTitle>
    <h3 class="page-header">Create a new employee</h3>
}
else
{
    <PageTitle>Edit employee </PageTitle>
    <h3 class="page-header">Edit Employee</h3>
}

<div class="page-content">
    <div class="form-content">
        <EditForm class="form-detail" Model="employee" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            @if (Id is not null)
            {
                <div class="mb-3">
                    <h5 class="page-header">@employee.FullName</h5>
                </div>
            }

            <div class="form-row-total">
                <div class="form-row">
                    <label class="text-center">Department</label>
                    <InputSelect @bind-Value="employee.DepartmentId" class="form-select">
                        @foreach (var depart in DepartmentService.Departments)
                        {
                            <option value="@depart.DepartId">@depart.DepartmentName => @depart.OfficeName</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-row">
                    <label for="email">Work Email</label>
                    <InputText id="email" @bind-Value="employee.Email" class="form-control" />
                    <ValidationMessage For="@(() => employee.Email)" />
                </div>

            </div>

            <div class="form-row-total mt-3">
                @if (Id is null)
                {
                    <div class="form-row">
                        <label class="text-center">Employee Name</label>
                        <InputSelect @bind-Value="employee.PersonId" class="form-select">
                            @foreach (var emp in PersonService.People)
                            {
                                <option value="@emp.PersonId">@emp.Name, @emp.Surname</option>
                            }
                        </InputSelect>
                    </div>
                }
                <div class="form-row">
                    <label class="form-check-label">Employee Active</label>
                    <InputCheckbox @bind-Value="employee.IsActive" class="form-check-input" />
                </div>

            </div>
            <div class="mt-3">
                <button type="submit" disabled="@disable" class="btn btn-warning btn-shape">@btnText</button>
                &nbsp;
                &nbsp;
                @if (Id is not null)
                {
                    <button type="button" class="btn btn-danger btn-shape" @onclick="RemoveEmployee">Delete Employee</button>
                }
                &nbsp;
                &nbsp;
                <a class="btn btn-primary mt-1 btn-shape" href="employee">Back People List</a>
            </div>
        </EditForm>
    </div>
</div>

@code {

    [Parameter]
    public string Id { get; set; }
    private EmployeeResponse employee = new EmployeeResponse();
    string btnText = string.Empty;
    bool disable { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        disable = false;
        btnText = Id == null ? "New Employee" : "Update Employee";
        await DepartmentService.GetDepartmentList();
        await PersonService.GetPeopleList();
    }

    protected override async Task OnParametersSetAsync()
    {

        if (Id is null)
        {
            var Department = DepartmentService.Departments[0];
            employee.DepartmentId = Department.DepartId;
            var Person = PersonService.People[0];
            employee.PersonId = Person.PersonId;
        }
        else
        {
            var result = await EmployeeService.GetEmployeeById(Id);
            if (result.Data is null)
            {
                ToastService.ShowError(result.Message, settings =>
                     { settings.IconType = IconType.FontAwesome; settings.DisableTimeout = true; });
            }
            else
            {
                if (result is not null && result.Data is not null)
                {
                    employee = result.Data;
                }
            }
            
        }
    }
    private async Task HandleSubmit()
    {
        if (Id is null)
        {
            var result = await EmployeeService.AddEmployee(employee);
            if (!result.Success)
            {
                ToastService.ShowError(result.Message, settings =>
                     { settings.IconType = IconType.FontAwesome; settings.DisableTimeout = true; });
                disable = true;
            }
            else
            {
                ToastService.ShowSuccess(result.Message, settings =>
                   { settings.IconType = IconType.FontAwesome; });
                Navigate();
            }
        }
        else
        {
            var result = await EmployeeService.UpdateEmployee(employee);
            if (!result.Success)
            {
                ToastService.ShowError(result.Message, settings =>
                    { settings.IconType = IconType.FontAwesome; settings.DisableTimeout = true; });
                disable = true;
            }
            else
            {
                ToastService.ShowSuccess(result.Message, settings =>
                   { settings.IconType = IconType.FontAwesome; });
                Navigate();
            }
        }
    }

    private async Task RemoveEmployee()
    {
        var result = await EmployeeService.RemoveEmployee(Id);
        if (!result.Success)
        {
            ToastService.ShowError(result.Message, settings =>
                     { settings.IconType = IconType.FontAwesome; settings.DisableTimeout = true; });
            disable = true;
        }
        else
        {
            ToastService.ShowSuccess(result.Message, settings =>
                   { settings.IconType = IconType.FontAwesome; });
            Navigate();
        }
    }

    private void Navigate()
    {
        NavigationManager.NavigateTo("employee/1");
    }
}